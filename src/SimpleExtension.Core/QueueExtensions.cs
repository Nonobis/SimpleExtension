using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace SimpleExtension.Core
{
    /// <summary>
    /// Class QueueExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class QueueExtensions
    {
        /// <summary>
        /// Enqueues all.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="queue">The queue.</param>
        /// <param name="items">The items.</param>
        public static void EnqueueAll<T>(this Queue<T> queue, T[] items)
        {
            foreach (T item in items)
            {
                queue.Enqueue(item);
            }
        }

        /// <summary>
        /// Waits for empty queue asynchronous.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="queue">The queue.</param>
        /// <param name="maxRetry">The maximum retry.</param>
        /// <param name="delayBetweenRetry">The delay between retry.</param>
        /// <returns>A Task representing the asynchronous operation.</returns>
        public static async Task WaitForEmptyQueueAsync<T>(this Queue<T> queue, int maxRetry, TimeSpan delayBetweenRetry)
        {
            int iRetry = 0;
            do
            {
                await Task.Delay(delayBetweenRetry).ConfigureAwait(false);
                if (queue?.Count == 0)
                {
                    break;
                }

                iRetry++;
            } while (iRetry < maxRetry);
        }
    }
}
