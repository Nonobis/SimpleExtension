using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SimpleExtension.Core
{
    /// <summary>
    /// Class DictionaryExtensions.
    /// </summary>
    /// <autogeneratedoc />
    public static class DictionaryExtensions
    {
        /// <summary>
        /// Adds if not exists.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        public static void AddIfNotExists<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue value)
        {
            CheckDictionaryIsNull(dictionary);
            if (!dictionary.ContainsKey(key))
            {
                dictionary.Add(key, value);
            }
        }

        /// <summary>
        /// Ares the keys empty.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public static bool AreKeysEmpty<TKey, TValue>(this Dictionary<TKey, TValue> dictionary)
        {
            CheckDictionaryIsNull(dictionary);
            return dictionary.All(x => x.Key == null);
        }

        /// <summary>
        /// Ares the values empty.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public static bool AreValuesEmpty<TKey, TValue>(this Dictionary<TKey, TValue> dictionary)
        {
            CheckDictionaryIsNull(dictionary);
            return dictionary.All(x => x.Value == null);
        }

        /// <summary>
        /// Deletes if exists key.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <param name="key">The key.</param>
        public static void DeleteIfExistsKey<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key)
        {
            CheckDictionaryIsNull(dictionary);
            if (dictionary.ContainsKey(key))
            {
                dictionary.Remove(key);
            }
        }

        /// <summary>
        /// Deletes if exists value.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <param name="value">The value.</param>
        public static void DeleteIfExistsValue<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TValue value)
        {
            CheckDictionaryIsNull(dictionary);
            if (!dictionary.ContainsValue(value))
            {
                return;
            }

            TKey key = dictionary.GetKeyFromValue(value);
            dictionary.Remove(key);
        }

        /// <summary>
        /// Returns a default value of type U if the key does not exist in the dictionary
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <param name="dic">The dictionary to search</param>
        /// <param name="key">Key to search for</param>
        /// <param name="onMissing">Optional default value of type U. If not specified, the C# default value will be returned.</param>
        /// <returns>U.</returns>
        public static U GetOrDefault<T, U>(this Dictionary<T, U> dic, T key, U onMissing = default(U))
        {
            U value;
            return dic.TryGetValue(key, out value) ? value : onMissing;
        }

        /// <summary>
        /// Returns an existing value U for key T, or creates a new instance of type U using the default constructor,
        /// adds it to the dictionary and returns it.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <param name="dic">The dic.</param>
        /// <param name="key">The key.</param>
        /// <returns>U.</returns>
        public static U GetOrInsertNew<T, U>(this Dictionary<T, U> dic, T key)
            where U : new()
        {
            if (dic.ContainsKey(key))
            {
                return dic[key];
            }

            U newObj = new();
            dic[key] = newObj;
            return newObj;
        }

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <param name="items">The items.</param>
        /// <param name="key">The key.</param>
        /// <returns>System.String.</returns>
        public static string GetValue(this Dictionary<string, List<string>> items, string key)
        {
            if (items.ContainsKey(key))
            {
                return items.GetValues(key).FirstOrDefault();
            }

            return string.Empty;
        }

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <param name="items">The items.</param>
        /// <param name="key">The key.</param>
        /// <returns>List&lt;System.String&gt;.</returns>
        public static List<string> GetValues(this Dictionary<string, List<string>> items, string key)
        {
            if (items.ContainsKey(key))
            {
                return items[key];
            }

            return new List<string>();
        }

        /// <summary>
        /// Updates the specified key.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        public static void Update<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue value)
        {
            CheckDictionaryIsNull(dictionary);
            CheckKeyValuePairIsNull(key, value);
            dictionary[key] = value;
        }

        /// <summary>
        /// Updates the specified pair.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <param name="pair">The pair.</param>
        public static void Update<TKey, TValue>(this Dictionary<TKey, TValue> dictionary,
            KeyValuePair<TKey, TValue> pair)
        {
            CheckDictionaryIsNull(dictionary);
            CheckKeyValuePairIsNull(pair);
            dictionary[pair.Key] = pair.Value;
        }

        /// <summary>
        /// Adds to keys list.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="keys">The keys.</param>
        /// <param name="pair">The pair.</param>
        /// <param name="value">The value.</param>
        private static void AddToKeysList<TKey, TValue>(List<TKey> keys, KeyValuePair<TKey, TValue> pair, TValue value)
        {
            if (pair.Value.Equals(value))
            {
                keys.Add(pair.Key);
            }
        }

        /// <summary>
        /// Checks the count greater zero.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="count">The count.</param>
        /// <param name="value">The value.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">count</exception>
        /// <exception cref="System.ArgumentException">value</exception>
        private static void CheckCountGreaterZero<TValue>(int count, TValue value)
        {
            if (count <= 0)
            {
                throw new ArgumentOutOfRangeException(nameof(count));
            }

            if (count > 1)
            {
                throw new ArgumentException(nameof(value));
            }
        }

        /// <summary>
        /// Checks the dictionary is null.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <exception cref="System.ArgumentNullException">dictionary</exception>
        private static void CheckDictionaryIsNull<TKey, TValue>(this Dictionary<TKey, TValue> dictionary)
        {
            if (dictionary == null)
            {
                throw new ArgumentNullException(nameof(dictionary));
            }
        }

        /// <summary>
        /// Checks the key value pair is null.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="pair">The pair.</param>
        /// <exception cref="System.ArgumentNullException">pair</exception>
        private static void CheckKeyValuePairIsNull<TKey, TValue>(KeyValuePair<TKey, TValue> pair)
        {
            if (pair.Key == null || pair.Value == null)
            {
                throw new ArgumentNullException(nameof(pair));
            }
        }

        /// <summary>
        /// Checks the key value pair is null.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <exception cref="System.ArgumentNullException">key</exception>
        /// <exception cref="System.ArgumentNullException">value</exception>
        private static void CheckKeyValuePairIsNull<TKey, TValue>(TKey key, TValue value)
        {
            if (key == null)
            {
                throw new ArgumentNullException(nameof(key));
            }

            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }
        }

        /// <summary>
        /// Gets the key from value.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="dictionary">The dictionary.</param>
        /// <param name="value">The value.</param>
        /// <returns>TKey.</returns>
        private static TKey GetKeyFromValue<TKey, TValue>(this Dictionary<TKey, TValue> dictionary,
            TValue value)
        {
            List<TKey> keys = new();
            foreach (KeyValuePair<TKey, TValue> pair in dictionary)
            {
                AddToKeysList(keys, pair, value);
            }

            CheckCountGreaterZero(keys.Count, value);
            return !keys.Any() ? default : keys.First();
        }
    }
}
